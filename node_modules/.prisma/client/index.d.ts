
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UsuarioPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Usuario"
  objects: {
    reservas: ReservasPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    ID: number
    username: string
    password: string
    name: string
    surname: string
    mail: string
  }, ExtArgs["result"]["usuario"]>
  composites: {}
}

/**
 * Model Usuario
 * 
 */
export type Usuario = runtime.Types.DefaultSelection<UsuarioPayload>
export type EstacionamientosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Estacionamientos"
  objects: {
    reservas: ReservasPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    ID: number
    adress: string
    type: string
    capacity: number
  }, ExtArgs["result"]["estacionamientos"]>
  composites: {}
}

/**
 * Model Estacionamientos
 * 
 */
export type Estacionamientos = runtime.Types.DefaultSelection<EstacionamientosPayload>
export type ReservasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Reservas"
  objects: {
    user: UsuarioPayload<ExtArgs>
    parking: EstacionamientosPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    ID: number
    userId: number
    parkingID: number
    resdate: Date
    resduration: number
  }, ExtArgs["result"]["reservas"]>
  composites: {}
}

/**
 * Model Reservas
 * 
 */
export type Reservas = runtime.Types.DefaultSelection<ReservasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.estacionamientos`: Exposes CRUD operations for the **Estacionamientos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estacionamientos
    * const estacionamientos = await prisma.estacionamientos.findMany()
    * ```
    */
  get estacionamientos(): Prisma.EstacionamientosDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.reservas`: Exposes CRUD operations for the **Reservas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservas
    * const reservas = await prisma.reservas.findMany()
    * ```
    */
  get reservas(): Prisma.ReservasDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: e90b936d84779543cbe0e494bc8b9d7337fad8e4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Estacionamientos: 'Estacionamientos',
    Reservas: 'Reservas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'estacionamientos' | 'reservas'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: UsuarioPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Estacionamientos: {
        payload: EstacionamientosPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EstacionamientosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstacionamientosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          findFirst: {
            args: Prisma.EstacionamientosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstacionamientosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          findMany: {
            args: Prisma.EstacionamientosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>[]
          }
          create: {
            args: Prisma.EstacionamientosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          createMany: {
            args: Prisma.EstacionamientosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EstacionamientosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          update: {
            args: Prisma.EstacionamientosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          deleteMany: {
            args: Prisma.EstacionamientosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EstacionamientosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EstacionamientosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EstacionamientosPayload>
          }
          aggregate: {
            args: Prisma.EstacionamientosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEstacionamientos>
          }
          groupBy: {
            args: Prisma.EstacionamientosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EstacionamientosGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstacionamientosCountArgs<ExtArgs>,
            result: $Utils.Optional<EstacionamientosCountAggregateOutputType> | number
          }
        }
      }
      Reservas: {
        payload: ReservasPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ReservasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          findFirst: {
            args: Prisma.ReservasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          findMany: {
            args: Prisma.ReservasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>[]
          }
          create: {
            args: Prisma.ReservasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          createMany: {
            args: Prisma.ReservasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          update: {
            args: Prisma.ReservasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          deleteMany: {
            args: Prisma.ReservasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReservasPayload>
          }
          aggregate: {
            args: Prisma.ReservasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReservas>
          }
          groupBy: {
            args: Prisma.ReservasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservasGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservasCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    reservas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reservas?: boolean | UsuarioCountOutputTypeCountReservasArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountReservasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReservasWhereInput
  }



  /**
   * Count Type EstacionamientosCountOutputType
   */


  export type EstacionamientosCountOutputType = {
    reservas: number
  }

  export type EstacionamientosCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reservas?: boolean | EstacionamientosCountOutputTypeCountReservasArgs
  }

  // Custom InputTypes

  /**
   * EstacionamientosCountOutputType without action
   */
  export type EstacionamientosCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstacionamientosCountOutputType
     */
    select?: EstacionamientosCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EstacionamientosCountOutputType without action
   */
  export type EstacionamientosCountOutputTypeCountReservasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReservasWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    ID: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    ID: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    ID: number | null
    username: string | null
    password: string | null
    name: string | null
    surname: string | null
    mail: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    ID: number | null
    username: string | null
    password: string | null
    name: string | null
    surname: string | null
    mail: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    ID: number
    username: number
    password: number
    name: number
    surname: number
    mail: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    ID?: true
  }

  export type UsuarioSumAggregateInputType = {
    ID?: true
  }

  export type UsuarioMinAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    name?: true
    surname?: true
    mail?: true
  }

  export type UsuarioMaxAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    name?: true
    surname?: true
    mail?: true
  }

  export type UsuarioCountAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    name?: true
    surname?: true
    mail?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: UsuarioScalarFieldEnum[]
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    ID: number
    username: string
    password: string
    name: string
    surname: string
    mail: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    mail?: boolean
    reservas?: boolean | Usuario$reservasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    ID?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    mail?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reservas?: boolean | Usuario$reservasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeArgs<ExtArgs>
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> = $Types.GetResult<UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const usuarioWithIDOnly = await prisma.usuario.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    reservas<T extends Usuario$reservasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$reservasArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsuarioFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsuarioFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: Enumerable<UsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.reservas
   */
  export type Usuario$reservasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    where?: ReservasWhereInput
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    cursor?: ReservasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReservasScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
  }



  /**
   * Model Estacionamientos
   */


  export type AggregateEstacionamientos = {
    _count: EstacionamientosCountAggregateOutputType | null
    _avg: EstacionamientosAvgAggregateOutputType | null
    _sum: EstacionamientosSumAggregateOutputType | null
    _min: EstacionamientosMinAggregateOutputType | null
    _max: EstacionamientosMaxAggregateOutputType | null
  }

  export type EstacionamientosAvgAggregateOutputType = {
    ID: number | null
    capacity: number | null
  }

  export type EstacionamientosSumAggregateOutputType = {
    ID: number | null
    capacity: number | null
  }

  export type EstacionamientosMinAggregateOutputType = {
    ID: number | null
    adress: string | null
    type: string | null
    capacity: number | null
  }

  export type EstacionamientosMaxAggregateOutputType = {
    ID: number | null
    adress: string | null
    type: string | null
    capacity: number | null
  }

  export type EstacionamientosCountAggregateOutputType = {
    ID: number
    adress: number
    type: number
    capacity: number
    _all: number
  }


  export type EstacionamientosAvgAggregateInputType = {
    ID?: true
    capacity?: true
  }

  export type EstacionamientosSumAggregateInputType = {
    ID?: true
    capacity?: true
  }

  export type EstacionamientosMinAggregateInputType = {
    ID?: true
    adress?: true
    type?: true
    capacity?: true
  }

  export type EstacionamientosMaxAggregateInputType = {
    ID?: true
    adress?: true
    type?: true
    capacity?: true
  }

  export type EstacionamientosCountAggregateInputType = {
    ID?: true
    adress?: true
    type?: true
    capacity?: true
    _all?: true
  }

  export type EstacionamientosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estacionamientos to aggregate.
     */
    where?: EstacionamientosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamientos to fetch.
     */
    orderBy?: Enumerable<EstacionamientosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstacionamientosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estacionamientos
    **/
    _count?: true | EstacionamientosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstacionamientosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstacionamientosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstacionamientosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstacionamientosMaxAggregateInputType
  }

  export type GetEstacionamientosAggregateType<T extends EstacionamientosAggregateArgs> = {
        [P in keyof T & keyof AggregateEstacionamientos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstacionamientos[P]>
      : GetScalarType<T[P], AggregateEstacionamientos[P]>
  }




  export type EstacionamientosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EstacionamientosWhereInput
    orderBy?: Enumerable<EstacionamientosOrderByWithAggregationInput>
    by: EstacionamientosScalarFieldEnum[]
    having?: EstacionamientosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstacionamientosCountAggregateInputType | true
    _avg?: EstacionamientosAvgAggregateInputType
    _sum?: EstacionamientosSumAggregateInputType
    _min?: EstacionamientosMinAggregateInputType
    _max?: EstacionamientosMaxAggregateInputType
  }


  export type EstacionamientosGroupByOutputType = {
    ID: number
    adress: string
    type: string
    capacity: number
    _count: EstacionamientosCountAggregateOutputType | null
    _avg: EstacionamientosAvgAggregateOutputType | null
    _sum: EstacionamientosSumAggregateOutputType | null
    _min: EstacionamientosMinAggregateOutputType | null
    _max: EstacionamientosMaxAggregateOutputType | null
  }

  type GetEstacionamientosGroupByPayload<T extends EstacionamientosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EstacionamientosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstacionamientosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstacionamientosGroupByOutputType[P]>
            : GetScalarType<T[P], EstacionamientosGroupByOutputType[P]>
        }
      >
    >


  export type EstacionamientosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    adress?: boolean
    type?: boolean
    capacity?: boolean
    reservas?: boolean | Estacionamientos$reservasArgs<ExtArgs>
    _count?: boolean | EstacionamientosCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["estacionamientos"]>

  export type EstacionamientosSelectScalar = {
    ID?: boolean
    adress?: boolean
    type?: boolean
    capacity?: boolean
  }

  export type EstacionamientosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reservas?: boolean | Estacionamientos$reservasArgs<ExtArgs>
    _count?: boolean | EstacionamientosCountOutputTypeArgs<ExtArgs>
  }


  type EstacionamientosGetPayload<S extends boolean | null | undefined | EstacionamientosArgs> = $Types.GetResult<EstacionamientosPayload, S>

  type EstacionamientosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EstacionamientosFindManyArgs, 'select' | 'include'> & {
      select?: EstacionamientosCountAggregateInputType | true
    }

  export interface EstacionamientosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estacionamientos'], meta: { name: 'Estacionamientos' } }
    /**
     * Find zero or one Estacionamientos that matches the filter.
     * @param {EstacionamientosFindUniqueArgs} args - Arguments to find a Estacionamientos
     * @example
     * // Get one Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstacionamientosFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EstacionamientosFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Estacionamientos'> extends True ? Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Estacionamientos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstacionamientosFindUniqueOrThrowArgs} args - Arguments to find a Estacionamientos
     * @example
     * // Get one Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstacionamientosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstacionamientosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Estacionamientos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosFindFirstArgs} args - Arguments to find a Estacionamientos
     * @example
     * // Get one Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstacionamientosFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EstacionamientosFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Estacionamientos'> extends True ? Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Estacionamientos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosFindFirstOrThrowArgs} args - Arguments to find a Estacionamientos
     * @example
     * // Get one Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstacionamientosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstacionamientosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Estacionamientos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findMany()
     * 
     * // Get first 10 Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const estacionamientosWithIDOnly = await prisma.estacionamientos.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends EstacionamientosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstacionamientosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Estacionamientos.
     * @param {EstacionamientosCreateArgs} args - Arguments to create a Estacionamientos.
     * @example
     * // Create one Estacionamientos
     * const Estacionamientos = await prisma.estacionamientos.create({
     *   data: {
     *     // ... data to create a Estacionamientos
     *   }
     * })
     * 
    **/
    create<T extends EstacionamientosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EstacionamientosCreateArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Estacionamientos.
     *     @param {EstacionamientosCreateManyArgs} args - Arguments to create many Estacionamientos.
     *     @example
     *     // Create many Estacionamientos
     *     const estacionamientos = await prisma.estacionamientos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstacionamientosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstacionamientosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estacionamientos.
     * @param {EstacionamientosDeleteArgs} args - Arguments to delete one Estacionamientos.
     * @example
     * // Delete one Estacionamientos
     * const Estacionamientos = await prisma.estacionamientos.delete({
     *   where: {
     *     // ... filter to delete one Estacionamientos
     *   }
     * })
     * 
    **/
    delete<T extends EstacionamientosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EstacionamientosDeleteArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Estacionamientos.
     * @param {EstacionamientosUpdateArgs} args - Arguments to update one Estacionamientos.
     * @example
     * // Update one Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstacionamientosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EstacionamientosUpdateArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Estacionamientos.
     * @param {EstacionamientosDeleteManyArgs} args - Arguments to filter Estacionamientos to delete.
     * @example
     * // Delete a few Estacionamientos
     * const { count } = await prisma.estacionamientos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstacionamientosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstacionamientosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estacionamientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstacionamientosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EstacionamientosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estacionamientos.
     * @param {EstacionamientosUpsertArgs} args - Arguments to update or create a Estacionamientos.
     * @example
     * // Update or create a Estacionamientos
     * const estacionamientos = await prisma.estacionamientos.upsert({
     *   create: {
     *     // ... data to create a Estacionamientos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estacionamientos we want to update
     *   }
     * })
    **/
    upsert<T extends EstacionamientosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EstacionamientosUpsertArgs<ExtArgs>>
    ): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Estacionamientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosCountArgs} args - Arguments to filter Estacionamientos to count.
     * @example
     * // Count the number of Estacionamientos
     * const count = await prisma.estacionamientos.count({
     *   where: {
     *     // ... the filter for the Estacionamientos we want to count
     *   }
     * })
    **/
    count<T extends EstacionamientosCountArgs>(
      args?: Subset<T, EstacionamientosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstacionamientosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estacionamientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstacionamientosAggregateArgs>(args: Subset<T, EstacionamientosAggregateArgs>): Prisma.PrismaPromise<GetEstacionamientosAggregateType<T>>

    /**
     * Group by Estacionamientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamientosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstacionamientosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstacionamientosGroupByArgs['orderBy'] }
        : { orderBy?: EstacionamientosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstacionamientosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstacionamientosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Estacionamientos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EstacionamientosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    reservas<T extends Estacionamientos$reservasArgs<ExtArgs> = {}>(args?: Subset<T, Estacionamientos$reservasArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Estacionamientos base type for findUnique actions
   */
  export type EstacionamientosFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter, which Estacionamientos to fetch.
     */
    where: EstacionamientosWhereUniqueInput
  }

  /**
   * Estacionamientos findUnique
   */
  export interface EstacionamientosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EstacionamientosFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Estacionamientos findUniqueOrThrow
   */
  export type EstacionamientosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter, which Estacionamientos to fetch.
     */
    where: EstacionamientosWhereUniqueInput
  }


  /**
   * Estacionamientos base type for findFirst actions
   */
  export type EstacionamientosFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter, which Estacionamientos to fetch.
     */
    where?: EstacionamientosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamientos to fetch.
     */
    orderBy?: Enumerable<EstacionamientosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estacionamientos.
     */
    cursor?: EstacionamientosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estacionamientos.
     */
    distinct?: Enumerable<EstacionamientosScalarFieldEnum>
  }

  /**
   * Estacionamientos findFirst
   */
  export interface EstacionamientosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EstacionamientosFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Estacionamientos findFirstOrThrow
   */
  export type EstacionamientosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter, which Estacionamientos to fetch.
     */
    where?: EstacionamientosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamientos to fetch.
     */
    orderBy?: Enumerable<EstacionamientosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estacionamientos.
     */
    cursor?: EstacionamientosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estacionamientos.
     */
    distinct?: Enumerable<EstacionamientosScalarFieldEnum>
  }


  /**
   * Estacionamientos findMany
   */
  export type EstacionamientosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter, which Estacionamientos to fetch.
     */
    where?: EstacionamientosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamientos to fetch.
     */
    orderBy?: Enumerable<EstacionamientosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estacionamientos.
     */
    cursor?: EstacionamientosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamientos.
     */
    skip?: number
    distinct?: Enumerable<EstacionamientosScalarFieldEnum>
  }


  /**
   * Estacionamientos create
   */
  export type EstacionamientosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * The data needed to create a Estacionamientos.
     */
    data: XOR<EstacionamientosCreateInput, EstacionamientosUncheckedCreateInput>
  }


  /**
   * Estacionamientos createMany
   */
  export type EstacionamientosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estacionamientos.
     */
    data: Enumerable<EstacionamientosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Estacionamientos update
   */
  export type EstacionamientosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * The data needed to update a Estacionamientos.
     */
    data: XOR<EstacionamientosUpdateInput, EstacionamientosUncheckedUpdateInput>
    /**
     * Choose, which Estacionamientos to update.
     */
    where: EstacionamientosWhereUniqueInput
  }


  /**
   * Estacionamientos updateMany
   */
  export type EstacionamientosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estacionamientos.
     */
    data: XOR<EstacionamientosUpdateManyMutationInput, EstacionamientosUncheckedUpdateManyInput>
    /**
     * Filter which Estacionamientos to update
     */
    where?: EstacionamientosWhereInput
  }


  /**
   * Estacionamientos upsert
   */
  export type EstacionamientosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * The filter to search for the Estacionamientos to update in case it exists.
     */
    where: EstacionamientosWhereUniqueInput
    /**
     * In case the Estacionamientos found by the `where` argument doesn't exist, create a new Estacionamientos with this data.
     */
    create: XOR<EstacionamientosCreateInput, EstacionamientosUncheckedCreateInput>
    /**
     * In case the Estacionamientos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstacionamientosUpdateInput, EstacionamientosUncheckedUpdateInput>
  }


  /**
   * Estacionamientos delete
   */
  export type EstacionamientosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
    /**
     * Filter which Estacionamientos to delete.
     */
    where: EstacionamientosWhereUniqueInput
  }


  /**
   * Estacionamientos deleteMany
   */
  export type EstacionamientosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estacionamientos to delete
     */
    where?: EstacionamientosWhereInput
  }


  /**
   * Estacionamientos.reservas
   */
  export type Estacionamientos$reservasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    where?: ReservasWhereInput
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    cursor?: ReservasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReservasScalarFieldEnum>
  }


  /**
   * Estacionamientos without action
   */
  export type EstacionamientosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estacionamientos
     */
    select?: EstacionamientosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamientosInclude<ExtArgs> | null
  }



  /**
   * Model Reservas
   */


  export type AggregateReservas = {
    _count: ReservasCountAggregateOutputType | null
    _avg: ReservasAvgAggregateOutputType | null
    _sum: ReservasSumAggregateOutputType | null
    _min: ReservasMinAggregateOutputType | null
    _max: ReservasMaxAggregateOutputType | null
  }

  export type ReservasAvgAggregateOutputType = {
    ID: number | null
    userId: number | null
    parkingID: number | null
    resduration: number | null
  }

  export type ReservasSumAggregateOutputType = {
    ID: number | null
    userId: number | null
    parkingID: number | null
    resduration: number | null
  }

  export type ReservasMinAggregateOutputType = {
    ID: number | null
    userId: number | null
    parkingID: number | null
    resdate: Date | null
    resduration: number | null
  }

  export type ReservasMaxAggregateOutputType = {
    ID: number | null
    userId: number | null
    parkingID: number | null
    resdate: Date | null
    resduration: number | null
  }

  export type ReservasCountAggregateOutputType = {
    ID: number
    userId: number
    parkingID: number
    resdate: number
    resduration: number
    _all: number
  }


  export type ReservasAvgAggregateInputType = {
    ID?: true
    userId?: true
    parkingID?: true
    resduration?: true
  }

  export type ReservasSumAggregateInputType = {
    ID?: true
    userId?: true
    parkingID?: true
    resduration?: true
  }

  export type ReservasMinAggregateInputType = {
    ID?: true
    userId?: true
    parkingID?: true
    resdate?: true
    resduration?: true
  }

  export type ReservasMaxAggregateInputType = {
    ID?: true
    userId?: true
    parkingID?: true
    resdate?: true
    resduration?: true
  }

  export type ReservasCountAggregateInputType = {
    ID?: true
    userId?: true
    parkingID?: true
    resdate?: true
    resduration?: true
    _all?: true
  }

  export type ReservasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservas to aggregate.
     */
    where?: ReservasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservas
    **/
    _count?: true | ReservasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservasMaxAggregateInputType
  }

  export type GetReservasAggregateType<T extends ReservasAggregateArgs> = {
        [P in keyof T & keyof AggregateReservas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservas[P]>
      : GetScalarType<T[P], AggregateReservas[P]>
  }




  export type ReservasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReservasWhereInput
    orderBy?: Enumerable<ReservasOrderByWithAggregationInput>
    by: ReservasScalarFieldEnum[]
    having?: ReservasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservasCountAggregateInputType | true
    _avg?: ReservasAvgAggregateInputType
    _sum?: ReservasSumAggregateInputType
    _min?: ReservasMinAggregateInputType
    _max?: ReservasMaxAggregateInputType
  }


  export type ReservasGroupByOutputType = {
    ID: number
    userId: number
    parkingID: number
    resdate: Date
    resduration: number
    _count: ReservasCountAggregateOutputType | null
    _avg: ReservasAvgAggregateOutputType | null
    _sum: ReservasSumAggregateOutputType | null
    _min: ReservasMinAggregateOutputType | null
    _max: ReservasMaxAggregateOutputType | null
  }

  type GetReservasGroupByPayload<T extends ReservasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReservasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservasGroupByOutputType[P]>
            : GetScalarType<T[P], ReservasGroupByOutputType[P]>
        }
      >
    >


  export type ReservasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    userId?: boolean
    parkingID?: boolean
    resdate?: boolean
    resduration?: boolean
    user?: boolean | UsuarioArgs<ExtArgs>
    parking?: boolean | EstacionamientosArgs<ExtArgs>
  }, ExtArgs["result"]["reservas"]>

  export type ReservasSelectScalar = {
    ID?: boolean
    userId?: boolean
    parkingID?: boolean
    resdate?: boolean
    resduration?: boolean
  }

  export type ReservasInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UsuarioArgs<ExtArgs>
    parking?: boolean | EstacionamientosArgs<ExtArgs>
  }


  type ReservasGetPayload<S extends boolean | null | undefined | ReservasArgs> = $Types.GetResult<ReservasPayload, S>

  type ReservasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReservasFindManyArgs, 'select' | 'include'> & {
      select?: ReservasCountAggregateInputType | true
    }

  export interface ReservasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservas'], meta: { name: 'Reservas' } }
    /**
     * Find zero or one Reservas that matches the filter.
     * @param {ReservasFindUniqueArgs} args - Arguments to find a Reservas
     * @example
     * // Get one Reservas
     * const reservas = await prisma.reservas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservasFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReservasFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reservas'> extends True ? Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Reservas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservasFindUniqueOrThrowArgs} args - Arguments to find a Reservas
     * @example
     * // Get one Reservas
     * const reservas = await prisma.reservas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasFindFirstArgs} args - Arguments to find a Reservas
     * @example
     * // Get one Reservas
     * const reservas = await prisma.reservas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservasFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReservasFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reservas'> extends True ? Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Reservas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasFindFirstOrThrowArgs} args - Arguments to find a Reservas
     * @example
     * // Get one Reservas
     * const reservas = await prisma.reservas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservas
     * const reservas = await prisma.reservas.findMany()
     * 
     * // Get first 10 Reservas
     * const reservas = await prisma.reservas.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const reservasWithIDOnly = await prisma.reservas.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends ReservasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Reservas.
     * @param {ReservasCreateArgs} args - Arguments to create a Reservas.
     * @example
     * // Create one Reservas
     * const Reservas = await prisma.reservas.create({
     *   data: {
     *     // ... data to create a Reservas
     *   }
     * })
     * 
    **/
    create<T extends ReservasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservasCreateArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Reservas.
     *     @param {ReservasCreateManyArgs} args - Arguments to create many Reservas.
     *     @example
     *     // Create many Reservas
     *     const reservas = await prisma.reservas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservas.
     * @param {ReservasDeleteArgs} args - Arguments to delete one Reservas.
     * @example
     * // Delete one Reservas
     * const Reservas = await prisma.reservas.delete({
     *   where: {
     *     // ... filter to delete one Reservas
     *   }
     * })
     * 
    **/
    delete<T extends ReservasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservasDeleteArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Reservas.
     * @param {ReservasUpdateArgs} args - Arguments to update one Reservas.
     * @example
     * // Update one Reservas
     * const reservas = await prisma.reservas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservasUpdateArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Reservas.
     * @param {ReservasDeleteManyArgs} args - Arguments to filter Reservas to delete.
     * @example
     * // Delete a few Reservas
     * const { count } = await prisma.reservas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservas
     * const reservas = await prisma.reservas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservas.
     * @param {ReservasUpsertArgs} args - Arguments to update or create a Reservas.
     * @example
     * // Update or create a Reservas
     * const reservas = await prisma.reservas.upsert({
     *   create: {
     *     // ... data to create a Reservas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservas we want to update
     *   }
     * })
    **/
    upsert<T extends ReservasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservasUpsertArgs<ExtArgs>>
    ): Prisma__ReservasClient<$Types.GetResult<ReservasPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasCountArgs} args - Arguments to filter Reservas to count.
     * @example
     * // Count the number of Reservas
     * const count = await prisma.reservas.count({
     *   where: {
     *     // ... the filter for the Reservas we want to count
     *   }
     * })
    **/
    count<T extends ReservasCountArgs>(
      args?: Subset<T, ReservasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservasAggregateArgs>(args: Subset<T, ReservasAggregateArgs>): Prisma.PrismaPromise<GetReservasAggregateType<T>>

    /**
     * Group by Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservasGroupByArgs['orderBy'] }
        : { orderBy?: ReservasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReservasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UsuarioArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Types.GetResult<UsuarioPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    parking<T extends EstacionamientosArgs<ExtArgs> = {}>(args?: Subset<T, EstacionamientosArgs<ExtArgs>>): Prisma__EstacionamientosClient<$Types.GetResult<EstacionamientosPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reservas base type for findUnique actions
   */
  export type ReservasFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where: ReservasWhereUniqueInput
  }

  /**
   * Reservas findUnique
   */
  export interface ReservasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReservasFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reservas findUniqueOrThrow
   */
  export type ReservasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where: ReservasWhereUniqueInput
  }


  /**
   * Reservas base type for findFirst actions
   */
  export type ReservasFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: Enumerable<ReservasScalarFieldEnum>
  }

  /**
   * Reservas findFirst
   */
  export interface ReservasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReservasFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reservas findFirstOrThrow
   */
  export type ReservasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: Enumerable<ReservasScalarFieldEnum>
  }


  /**
   * Reservas findMany
   */
  export type ReservasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservas.
     */
    cursor?: ReservasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    distinct?: Enumerable<ReservasScalarFieldEnum>
  }


  /**
   * Reservas create
   */
  export type ReservasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservas.
     */
    data: XOR<ReservasCreateInput, ReservasUncheckedCreateInput>
  }


  /**
   * Reservas createMany
   */
  export type ReservasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservas.
     */
    data: Enumerable<ReservasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reservas update
   */
  export type ReservasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservas.
     */
    data: XOR<ReservasUpdateInput, ReservasUncheckedUpdateInput>
    /**
     * Choose, which Reservas to update.
     */
    where: ReservasWhereUniqueInput
  }


  /**
   * Reservas updateMany
   */
  export type ReservasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservas.
     */
    data: XOR<ReservasUpdateManyMutationInput, ReservasUncheckedUpdateManyInput>
    /**
     * Filter which Reservas to update
     */
    where?: ReservasWhereInput
  }


  /**
   * Reservas upsert
   */
  export type ReservasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservas to update in case it exists.
     */
    where: ReservasWhereUniqueInput
    /**
     * In case the Reservas found by the `where` argument doesn't exist, create a new Reservas with this data.
     */
    create: XOR<ReservasCreateInput, ReservasUncheckedCreateInput>
    /**
     * In case the Reservas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservasUpdateInput, ReservasUncheckedUpdateInput>
  }


  /**
   * Reservas delete
   */
  export type ReservasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
    /**
     * Filter which Reservas to delete.
     */
    where: ReservasWhereUniqueInput
  }


  /**
   * Reservas deleteMany
   */
  export type ReservasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservas to delete
     */
    where?: ReservasWhereInput
  }


  /**
   * Reservas without action
   */
  export type ReservasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservas
     */
    select?: ReservasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservasInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    ID: 'ID',
    username: 'username',
    password: 'password',
    name: 'name',
    surname: 'surname',
    mail: 'mail'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const EstacionamientosScalarFieldEnum: {
    ID: 'ID',
    adress: 'adress',
    type: 'type',
    capacity: 'capacity'
  };

  export type EstacionamientosScalarFieldEnum = (typeof EstacionamientosScalarFieldEnum)[keyof typeof EstacionamientosScalarFieldEnum]


  export const ReservasScalarFieldEnum: {
    ID: 'ID',
    userId: 'userId',
    parkingID: 'parkingID',
    resdate: 'resdate',
    resduration: 'resduration'
  };

  export type ReservasScalarFieldEnum = (typeof ReservasScalarFieldEnum)[keyof typeof ReservasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    ID?: IntFilter<"Usuario"> | number
    username?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    name?: StringFilter<"Usuario"> | string
    surname?: StringFilter<"Usuario"> | string
    mail?: StringFilter<"Usuario"> | string
    reservas?: ReservasListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    mail?: SortOrder
    reservas?: ReservasOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    username?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    name?: StringFilter<"Usuario"> | string
    surname?: StringFilter<"Usuario"> | string
    mail?: StringFilter<"Usuario"> | string
    reservas?: ReservasListRelationFilter
  }, "ID">

  export type UsuarioOrderByWithAggregationInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    mail?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter<"Usuario"> | number
    username?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    name?: StringWithAggregatesFilter<"Usuario"> | string
    surname?: StringWithAggregatesFilter<"Usuario"> | string
    mail?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type EstacionamientosWhereInput = {
    AND?: Enumerable<EstacionamientosWhereInput>
    OR?: Enumerable<EstacionamientosWhereInput>
    NOT?: Enumerable<EstacionamientosWhereInput>
    ID?: IntFilter<"Estacionamientos"> | number
    adress?: StringFilter<"Estacionamientos"> | string
    type?: StringFilter<"Estacionamientos"> | string
    capacity?: IntFilter<"Estacionamientos"> | number
    reservas?: ReservasListRelationFilter
  }

  export type EstacionamientosOrderByWithRelationInput = {
    ID?: SortOrder
    adress?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
    reservas?: ReservasOrderByRelationAggregateInput
  }

  export type EstacionamientosWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: Enumerable<EstacionamientosWhereInput>
    OR?: Enumerable<EstacionamientosWhereInput>
    NOT?: Enumerable<EstacionamientosWhereInput>
    adress?: StringFilter<"Estacionamientos"> | string
    type?: StringFilter<"Estacionamientos"> | string
    capacity?: IntFilter<"Estacionamientos"> | number
    reservas?: ReservasListRelationFilter
  }, "ID">

  export type EstacionamientosOrderByWithAggregationInput = {
    ID?: SortOrder
    adress?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
    _count?: EstacionamientosCountOrderByAggregateInput
    _avg?: EstacionamientosAvgOrderByAggregateInput
    _max?: EstacionamientosMaxOrderByAggregateInput
    _min?: EstacionamientosMinOrderByAggregateInput
    _sum?: EstacionamientosSumOrderByAggregateInput
  }

  export type EstacionamientosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EstacionamientosScalarWhereWithAggregatesInput>
    OR?: Enumerable<EstacionamientosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EstacionamientosScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter<"Estacionamientos"> | number
    adress?: StringWithAggregatesFilter<"Estacionamientos"> | string
    type?: StringWithAggregatesFilter<"Estacionamientos"> | string
    capacity?: IntWithAggregatesFilter<"Estacionamientos"> | number
  }

  export type ReservasWhereInput = {
    AND?: Enumerable<ReservasWhereInput>
    OR?: Enumerable<ReservasWhereInput>
    NOT?: Enumerable<ReservasWhereInput>
    ID?: IntFilter<"Reservas"> | number
    userId?: IntFilter<"Reservas"> | number
    parkingID?: IntFilter<"Reservas"> | number
    resdate?: DateTimeFilter<"Reservas"> | Date | string
    resduration?: IntFilter<"Reservas"> | number
    user?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    parking?: XOR<EstacionamientosRelationFilter, EstacionamientosWhereInput>
  }

  export type ReservasOrderByWithRelationInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resdate?: SortOrder
    resduration?: SortOrder
    user?: UsuarioOrderByWithRelationInput
    parking?: EstacionamientosOrderByWithRelationInput
  }

  export type ReservasWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: Enumerable<ReservasWhereInput>
    OR?: Enumerable<ReservasWhereInput>
    NOT?: Enumerable<ReservasWhereInput>
    userId?: IntFilter<"Reservas"> | number
    parkingID?: IntFilter<"Reservas"> | number
    resdate?: DateTimeFilter<"Reservas"> | Date | string
    resduration?: IntFilter<"Reservas"> | number
    user?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    parking?: XOR<EstacionamientosRelationFilter, EstacionamientosWhereInput>
  }, "ID">

  export type ReservasOrderByWithAggregationInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resdate?: SortOrder
    resduration?: SortOrder
    _count?: ReservasCountOrderByAggregateInput
    _avg?: ReservasAvgOrderByAggregateInput
    _max?: ReservasMaxOrderByAggregateInput
    _min?: ReservasMinOrderByAggregateInput
    _sum?: ReservasSumOrderByAggregateInput
  }

  export type ReservasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReservasScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReservasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReservasScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter<"Reservas"> | number
    userId?: IntWithAggregatesFilter<"Reservas"> | number
    parkingID?: IntWithAggregatesFilter<"Reservas"> | number
    resdate?: DateTimeWithAggregatesFilter<"Reservas"> | Date | string
    resduration?: IntWithAggregatesFilter<"Reservas"> | number
  }

  export type UsuarioCreateInput = {
    username: string
    password: string
    name: string
    surname: string
    mail: string
    reservas?: ReservasCreateNestedManyWithoutUserInput
  }

  export type UsuarioUncheckedCreateInput = {
    ID?: number
    username: string
    password: string
    name: string
    surname: string
    mail: string
    reservas?: ReservasUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsuarioUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    reservas?: ReservasUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    reservas?: ReservasUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsuarioCreateManyInput = {
    ID?: number
    username: string
    password: string
    name: string
    surname: string
    mail: string
  }

  export type UsuarioUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamientosCreateInput = {
    adress: string
    type: string
    capacity: number
    reservas?: ReservasCreateNestedManyWithoutParkingInput
  }

  export type EstacionamientosUncheckedCreateInput = {
    ID?: number
    adress: string
    type: string
    capacity: number
    reservas?: ReservasUncheckedCreateNestedManyWithoutParkingInput
  }

  export type EstacionamientosUpdateInput = {
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    reservas?: ReservasUpdateManyWithoutParkingNestedInput
  }

  export type EstacionamientosUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    reservas?: ReservasUncheckedUpdateManyWithoutParkingNestedInput
  }

  export type EstacionamientosCreateManyInput = {
    ID?: number
    adress: string
    type: string
    capacity: number
  }

  export type EstacionamientosUpdateManyMutationInput = {
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type EstacionamientosUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasCreateInput = {
    resdate: Date | string
    resduration: number
    user: UsuarioCreateNestedOneWithoutReservasInput
    parking: EstacionamientosCreateNestedOneWithoutReservasInput
  }

  export type ReservasUncheckedCreateInput = {
    ID?: number
    userId: number
    parkingID: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasUpdateInput = {
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
    user?: UsuarioUpdateOneRequiredWithoutReservasNestedInput
    parking?: EstacionamientosUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservasUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parkingID?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasCreateManyInput = {
    ID?: number
    userId: number
    parkingID: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasUpdateManyMutationInput = {
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parkingID?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ReservasListRelationFilter = {
    every?: ReservasWhereInput
    some?: ReservasWhereInput
    none?: ReservasWhereInput
  }

  export type ReservasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    mail?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    mail?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    mail?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EstacionamientosCountOrderByAggregateInput = {
    ID?: SortOrder
    adress?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
  }

  export type EstacionamientosAvgOrderByAggregateInput = {
    ID?: SortOrder
    capacity?: SortOrder
  }

  export type EstacionamientosMaxOrderByAggregateInput = {
    ID?: SortOrder
    adress?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
  }

  export type EstacionamientosMinOrderByAggregateInput = {
    ID?: SortOrder
    adress?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
  }

  export type EstacionamientosSumOrderByAggregateInput = {
    ID?: SortOrder
    capacity?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type EstacionamientosRelationFilter = {
    is?: EstacionamientosWhereInput
    isNot?: EstacionamientosWhereInput
  }

  export type ReservasCountOrderByAggregateInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resdate?: SortOrder
    resduration?: SortOrder
  }

  export type ReservasAvgOrderByAggregateInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resduration?: SortOrder
  }

  export type ReservasMaxOrderByAggregateInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resdate?: SortOrder
    resduration?: SortOrder
  }

  export type ReservasMinOrderByAggregateInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resdate?: SortOrder
    resduration?: SortOrder
  }

  export type ReservasSumOrderByAggregateInput = {
    ID?: SortOrder
    userId?: SortOrder
    parkingID?: SortOrder
    resduration?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ReservasCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutUserInput>, Enumerable<ReservasUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutUserInput>
    createMany?: ReservasCreateManyUserInputEnvelope
    connect?: Enumerable<ReservasWhereUniqueInput>
  }

  export type ReservasUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutUserInput>, Enumerable<ReservasUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutUserInput>
    createMany?: ReservasCreateManyUserInputEnvelope
    connect?: Enumerable<ReservasWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ReservasUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutUserInput>, Enumerable<ReservasUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReservasUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReservasCreateManyUserInputEnvelope
    set?: Enumerable<ReservasWhereUniqueInput>
    disconnect?: Enumerable<ReservasWhereUniqueInput>
    delete?: Enumerable<ReservasWhereUniqueInput>
    connect?: Enumerable<ReservasWhereUniqueInput>
    update?: Enumerable<ReservasUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReservasUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReservasScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReservasUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutUserInput>, Enumerable<ReservasUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReservasUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReservasCreateManyUserInputEnvelope
    set?: Enumerable<ReservasWhereUniqueInput>
    disconnect?: Enumerable<ReservasWhereUniqueInput>
    delete?: Enumerable<ReservasWhereUniqueInput>
    connect?: Enumerable<ReservasWhereUniqueInput>
    update?: Enumerable<ReservasUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReservasUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReservasScalarWhereInput>
  }

  export type ReservasCreateNestedManyWithoutParkingInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutParkingInput>, Enumerable<ReservasUncheckedCreateWithoutParkingInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutParkingInput>
    createMany?: ReservasCreateManyParkingInputEnvelope
    connect?: Enumerable<ReservasWhereUniqueInput>
  }

  export type ReservasUncheckedCreateNestedManyWithoutParkingInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutParkingInput>, Enumerable<ReservasUncheckedCreateWithoutParkingInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutParkingInput>
    createMany?: ReservasCreateManyParkingInputEnvelope
    connect?: Enumerable<ReservasWhereUniqueInput>
  }

  export type ReservasUpdateManyWithoutParkingNestedInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutParkingInput>, Enumerable<ReservasUncheckedCreateWithoutParkingInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutParkingInput>
    upsert?: Enumerable<ReservasUpsertWithWhereUniqueWithoutParkingInput>
    createMany?: ReservasCreateManyParkingInputEnvelope
    set?: Enumerable<ReservasWhereUniqueInput>
    disconnect?: Enumerable<ReservasWhereUniqueInput>
    delete?: Enumerable<ReservasWhereUniqueInput>
    connect?: Enumerable<ReservasWhereUniqueInput>
    update?: Enumerable<ReservasUpdateWithWhereUniqueWithoutParkingInput>
    updateMany?: Enumerable<ReservasUpdateManyWithWhereWithoutParkingInput>
    deleteMany?: Enumerable<ReservasScalarWhereInput>
  }

  export type ReservasUncheckedUpdateManyWithoutParkingNestedInput = {
    create?: XOR<Enumerable<ReservasCreateWithoutParkingInput>, Enumerable<ReservasUncheckedCreateWithoutParkingInput>>
    connectOrCreate?: Enumerable<ReservasCreateOrConnectWithoutParkingInput>
    upsert?: Enumerable<ReservasUpsertWithWhereUniqueWithoutParkingInput>
    createMany?: ReservasCreateManyParkingInputEnvelope
    set?: Enumerable<ReservasWhereUniqueInput>
    disconnect?: Enumerable<ReservasWhereUniqueInput>
    delete?: Enumerable<ReservasWhereUniqueInput>
    connect?: Enumerable<ReservasWhereUniqueInput>
    update?: Enumerable<ReservasUpdateWithWhereUniqueWithoutParkingInput>
    updateMany?: Enumerable<ReservasUpdateManyWithWhereWithoutParkingInput>
    deleteMany?: Enumerable<ReservasScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutReservasInput = {
    create?: XOR<UsuarioCreateWithoutReservasInput, UsuarioUncheckedCreateWithoutReservasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutReservasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EstacionamientosCreateNestedOneWithoutReservasInput = {
    create?: XOR<EstacionamientosCreateWithoutReservasInput, EstacionamientosUncheckedCreateWithoutReservasInput>
    connectOrCreate?: EstacionamientosCreateOrConnectWithoutReservasInput
    connect?: EstacionamientosWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneRequiredWithoutReservasNestedInput = {
    create?: XOR<UsuarioCreateWithoutReservasInput, UsuarioUncheckedCreateWithoutReservasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutReservasInput
    upsert?: UsuarioUpsertWithoutReservasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutReservasInput, UsuarioUpdateWithoutReservasInput>, UsuarioUncheckedUpdateWithoutReservasInput>
  }

  export type EstacionamientosUpdateOneRequiredWithoutReservasNestedInput = {
    create?: XOR<EstacionamientosCreateWithoutReservasInput, EstacionamientosUncheckedCreateWithoutReservasInput>
    connectOrCreate?: EstacionamientosCreateOrConnectWithoutReservasInput
    upsert?: EstacionamientosUpsertWithoutReservasInput
    connect?: EstacionamientosWhereUniqueInput
    update?: XOR<XOR<EstacionamientosUpdateToOneWithWhereWithoutReservasInput, EstacionamientosUpdateWithoutReservasInput>, EstacionamientosUncheckedUpdateWithoutReservasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ReservasCreateWithoutUserInput = {
    resdate: Date | string
    resduration: number
    parking: EstacionamientosCreateNestedOneWithoutReservasInput
  }

  export type ReservasUncheckedCreateWithoutUserInput = {
    ID?: number
    parkingID: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasCreateOrConnectWithoutUserInput = {
    where: ReservasWhereUniqueInput
    create: XOR<ReservasCreateWithoutUserInput, ReservasUncheckedCreateWithoutUserInput>
  }

  export type ReservasCreateManyUserInputEnvelope = {
    data: Enumerable<ReservasCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReservasUpsertWithWhereUniqueWithoutUserInput = {
    where: ReservasWhereUniqueInput
    update: XOR<ReservasUpdateWithoutUserInput, ReservasUncheckedUpdateWithoutUserInput>
    create: XOR<ReservasCreateWithoutUserInput, ReservasUncheckedCreateWithoutUserInput>
  }

  export type ReservasUpdateWithWhereUniqueWithoutUserInput = {
    where: ReservasWhereUniqueInput
    data: XOR<ReservasUpdateWithoutUserInput, ReservasUncheckedUpdateWithoutUserInput>
  }

  export type ReservasUpdateManyWithWhereWithoutUserInput = {
    where: ReservasScalarWhereInput
    data: XOR<ReservasUpdateManyMutationInput, ReservasUncheckedUpdateManyWithoutUserInput>
  }

  export type ReservasScalarWhereInput = {
    AND?: Enumerable<ReservasScalarWhereInput>
    OR?: Enumerable<ReservasScalarWhereInput>
    NOT?: Enumerable<ReservasScalarWhereInput>
    ID?: IntFilter<"Reservas"> | number
    userId?: IntFilter<"Reservas"> | number
    parkingID?: IntFilter<"Reservas"> | number
    resdate?: DateTimeFilter<"Reservas"> | Date | string
    resduration?: IntFilter<"Reservas"> | number
  }

  export type ReservasCreateWithoutParkingInput = {
    resdate: Date | string
    resduration: number
    user: UsuarioCreateNestedOneWithoutReservasInput
  }

  export type ReservasUncheckedCreateWithoutParkingInput = {
    ID?: number
    userId: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasCreateOrConnectWithoutParkingInput = {
    where: ReservasWhereUniqueInput
    create: XOR<ReservasCreateWithoutParkingInput, ReservasUncheckedCreateWithoutParkingInput>
  }

  export type ReservasCreateManyParkingInputEnvelope = {
    data: Enumerable<ReservasCreateManyParkingInput>
    skipDuplicates?: boolean
  }

  export type ReservasUpsertWithWhereUniqueWithoutParkingInput = {
    where: ReservasWhereUniqueInput
    update: XOR<ReservasUpdateWithoutParkingInput, ReservasUncheckedUpdateWithoutParkingInput>
    create: XOR<ReservasCreateWithoutParkingInput, ReservasUncheckedCreateWithoutParkingInput>
  }

  export type ReservasUpdateWithWhereUniqueWithoutParkingInput = {
    where: ReservasWhereUniqueInput
    data: XOR<ReservasUpdateWithoutParkingInput, ReservasUncheckedUpdateWithoutParkingInput>
  }

  export type ReservasUpdateManyWithWhereWithoutParkingInput = {
    where: ReservasScalarWhereInput
    data: XOR<ReservasUpdateManyMutationInput, ReservasUncheckedUpdateManyWithoutParkingInput>
  }

  export type UsuarioCreateWithoutReservasInput = {
    username: string
    password: string
    name: string
    surname: string
    mail: string
  }

  export type UsuarioUncheckedCreateWithoutReservasInput = {
    ID?: number
    username: string
    password: string
    name: string
    surname: string
    mail: string
  }

  export type UsuarioCreateOrConnectWithoutReservasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutReservasInput, UsuarioUncheckedCreateWithoutReservasInput>
  }

  export type EstacionamientosCreateWithoutReservasInput = {
    adress: string
    type: string
    capacity: number
  }

  export type EstacionamientosUncheckedCreateWithoutReservasInput = {
    ID?: number
    adress: string
    type: string
    capacity: number
  }

  export type EstacionamientosCreateOrConnectWithoutReservasInput = {
    where: EstacionamientosWhereUniqueInput
    create: XOR<EstacionamientosCreateWithoutReservasInput, EstacionamientosUncheckedCreateWithoutReservasInput>
  }

  export type UsuarioUpsertWithoutReservasInput = {
    update: XOR<UsuarioUpdateWithoutReservasInput, UsuarioUncheckedUpdateWithoutReservasInput>
    create: XOR<UsuarioCreateWithoutReservasInput, UsuarioUncheckedCreateWithoutReservasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutReservasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutReservasInput, UsuarioUncheckedUpdateWithoutReservasInput>
  }

  export type UsuarioUpdateWithoutReservasInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateWithoutReservasInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamientosUpsertWithoutReservasInput = {
    update: XOR<EstacionamientosUpdateWithoutReservasInput, EstacionamientosUncheckedUpdateWithoutReservasInput>
    create: XOR<EstacionamientosCreateWithoutReservasInput, EstacionamientosUncheckedCreateWithoutReservasInput>
    where?: EstacionamientosWhereInput
  }

  export type EstacionamientosUpdateToOneWithWhereWithoutReservasInput = {
    where?: EstacionamientosWhereInput
    data: XOR<EstacionamientosUpdateWithoutReservasInput, EstacionamientosUncheckedUpdateWithoutReservasInput>
  }

  export type EstacionamientosUpdateWithoutReservasInput = {
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type EstacionamientosUncheckedUpdateWithoutReservasInput = {
    ID?: IntFieldUpdateOperationsInput | number
    adress?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasCreateManyUserInput = {
    ID?: number
    parkingID: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasUpdateWithoutUserInput = {
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
    parking?: EstacionamientosUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservasUncheckedUpdateWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    parkingID?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasUncheckedUpdateManyWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    parkingID?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasCreateManyParkingInput = {
    ID?: number
    userId: number
    resdate: Date | string
    resduration: number
  }

  export type ReservasUpdateWithoutParkingInput = {
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
    user?: UsuarioUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservasUncheckedUpdateWithoutParkingInput = {
    ID?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }

  export type ReservasUncheckedUpdateManyWithoutParkingInput = {
    ID?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resdate?: DateTimeFieldUpdateOperationsInput | Date | string
    resduration?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}